/*
 * This file is generated by jOOQ.
*/
package com.zallhy.hyapp.tables;


import com.zallhy.hyapp.Ejavashop;
import com.zallhy.hyapp.Keys;
import com.zallhy.hyapp.tables.records.ProductCateRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 商品分类
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductCate extends TableImpl<ProductCateRecord> {

    private static final long serialVersionUID = 1187125350;

    /**
     * The reference instance of <code>ejavashop.product_cate</code>
     */
    public static final ProductCate PRODUCT_CATE = new ProductCate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCateRecord> getRecordType() {
        return ProductCateRecord.class;
    }

    /**
     * The column <code>ejavashop.product_cate.id</code>.
     */
    public final TableField<ProductCateRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ejavashop.product_cate.product_type_id</code>. 类型ID
     */
    public final TableField<ProductCateRecord, Integer> PRODUCT_TYPE_ID = createField("product_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "类型ID");

    /**
     * The column <code>ejavashop.product_cate.pid</code>. 父类ID
     */
    public final TableField<ProductCateRecord, Integer> PID = createField("pid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "父类ID");

    /**
     * The column <code>ejavashop.product_cate.name</code>. 分类名称
     */
    public final TableField<ProductCateRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "分类名称");

    /**
     * The column <code>ejavashop.product_cate.path</code>. 上级分类路径
     */
    public final TableField<ProductCateRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "上级分类路径");

    /**
     * The column <code>ejavashop.product_cate.scaling</code>. 分佣比例(商家给平台的分佣比例，填写1到100的数字)
     */
    public final TableField<ProductCateRecord, Double> SCALING = createField("scaling", org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "分佣比例(商家给平台的分佣比例，填写1到100的数字)");

    /**
     * The column <code>ejavashop.product_cate.create_id</code>. 创建人
     */
    public final TableField<ProductCateRecord, Integer> CREATE_ID = createField("create_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "创建人");

    /**
     * The column <code>ejavashop.product_cate.update_id</code>. 更新人
     */
    public final TableField<ProductCateRecord, Integer> UPDATE_ID = createField("update_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "更新人");

    /**
     * The column <code>ejavashop.product_cate.create_time</code>. 创建时间
     */
    public final TableField<ProductCateRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>ejavashop.product_cate.update_time</code>. 更新时间
     */
    public final TableField<ProductCateRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "更新时间");

    /**
     * The column <code>ejavashop.product_cate.sort</code>. 排序
     */
    public final TableField<ProductCateRecord, Integer> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "排序");

    /**
     * The column <code>ejavashop.product_cate.status</code>. 0、默认；1、提交审核；2、审核通过；3、审核失败；4、停用
     */
    public final TableField<ProductCateRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0、默认；1、提交审核；2、审核通过；3、审核失败；4、停用");

    /**
     * The column <code>ejavashop.product_cate.cate_pic</code>. 商品分类图片
     */
    public final TableField<ProductCateRecord, String> CATE_PIC = createField("cate_pic", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "商品分类图片");

    /**
     * The column <code>ejavashop.product_cate.cate_local</code>. 分类详情显示区域
     */
    public final TableField<ProductCateRecord, String> CATE_LOCAL = createField("cate_local", org.jooq.impl.SQLDataType.VARCHAR.length(10).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "分类详情显示区域");

    /**
     * The column <code>ejavashop.product_cate.cate_image</code>. 详情页展示图片
     */
    public final TableField<ProductCateRecord, String> CATE_IMAGE = createField("cate_image", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "详情页展示图片");

    /**
     * Create a <code>ejavashop.product_cate</code> table reference
     */
    public ProductCate() {
        this("product_cate", null);
    }

    /**
     * Create an aliased <code>ejavashop.product_cate</code> table reference
     */
    public ProductCate(String alias) {
        this(alias, PRODUCT_CATE);
    }

    private ProductCate(String alias, Table<ProductCateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductCate(String alias, Table<ProductCateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "商品分类");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ejavashop.EJAVASHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductCateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCT_CATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductCateRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_CATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductCateRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductCateRecord>>asList(Keys.KEY_PRODUCT_CATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCate as(String alias) {
        return new ProductCate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCate rename(String name) {
        return new ProductCate(name, null);
    }
}
