/*
 * This file is generated by jOOQ.
*/
package com.zallhy.hyapp.tables;


import com.zallhy.hyapp.Ejavashop;
import com.zallhy.hyapp.Keys;
import com.zallhy.hyapp.tables.records.SearchLogsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 搜索历史记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SearchLogs extends TableImpl<SearchLogsRecord> {

    private static final long serialVersionUID = -982544132;

    /**
     * The reference instance of <code>ejavashop.search_logs</code>
     */
    public static final SearchLogs SEARCH_LOGS = new SearchLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SearchLogsRecord> getRecordType() {
        return SearchLogsRecord.class;
    }

    /**
     * The column <code>ejavashop.search_logs.id</code>.
     */
    public final TableField<SearchLogsRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ejavashop.search_logs.keyword</code>. 搜索词
     */
    public final TableField<SearchLogsRecord, String> KEYWORD = createField("keyword", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "搜索词");

    /**
     * The column <code>ejavashop.search_logs.ip</code>. IP地址
     */
    public final TableField<SearchLogsRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "IP地址");

    /**
     * The column <code>ejavashop.search_logs.site_cookie</code>. cookie埋点
     */
    public final TableField<SearchLogsRecord, String> SITE_COOKIE = createField("site_cookie", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "cookie埋点");

    /**
     * The column <code>ejavashop.search_logs.member_id</code>. 用户不登录存0
     */
    public final TableField<SearchLogsRecord, Integer> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户不登录存0");

    /**
     * The column <code>ejavashop.search_logs.create_time</code>.
     */
    public final TableField<SearchLogsRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>ejavashop.search_logs</code> table reference
     */
    public SearchLogs() {
        this("search_logs", null);
    }

    /**
     * Create an aliased <code>ejavashop.search_logs</code> table reference
     */
    public SearchLogs(String alias) {
        this(alias, SEARCH_LOGS);
    }

    private SearchLogs(String alias, Table<SearchLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SearchLogs(String alias, Table<SearchLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "搜索历史记录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ejavashop.EJAVASHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SearchLogsRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_SEARCH_LOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SearchLogsRecord> getPrimaryKey() {
        return Keys.KEY_SEARCH_LOGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SearchLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<SearchLogsRecord>>asList(Keys.KEY_SEARCH_LOGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SearchLogs as(String alias) {
        return new SearchLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SearchLogs rename(String name) {
        return new SearchLogs(name, null);
    }
}
