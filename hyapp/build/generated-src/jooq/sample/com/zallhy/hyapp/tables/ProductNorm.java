/*
 * This file is generated by jOOQ.
*/
package com.zallhy.hyapp.tables;


import com.zallhy.hyapp.Ejavashop;
import com.zallhy.hyapp.Keys;
import com.zallhy.hyapp.tables.records.ProductNormRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 商品规格表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductNorm extends TableImpl<ProductNormRecord> {

    private static final long serialVersionUID = -1584641087;

    /**
     * The reference instance of <code>ejavashop.product_norm</code>
     */
    public static final ProductNorm PRODUCT_NORM = new ProductNorm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductNormRecord> getRecordType() {
        return ProductNormRecord.class;
    }

    /**
     * The column <code>ejavashop.product_norm.id</code>.
     */
    public final TableField<ProductNormRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ejavashop.product_norm.name</code>. 规格名称
     */
    public final TableField<ProductNormRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "规格名称");

    /**
     * The column <code>ejavashop.product_norm.sort</code>. 排序
     */
    public final TableField<ProductNormRecord, Integer> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "排序");

    /**
     * The column <code>ejavashop.product_norm.type</code>. 规格类型1、文字；2、图片
     */
    public final TableField<ProductNormRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "规格类型1、文字；2、图片");

    /**
     * The column <code>ejavashop.product_norm.create_id</code>. 创建人
     */
    public final TableField<ProductNormRecord, Integer> CREATE_ID = createField("create_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "创建人");

    /**
     * The column <code>ejavashop.product_norm.create_time</code>. 创建时间
     */
    public final TableField<ProductNormRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>ejavashop.product_norm.update_id</code>. 更新人
     */
    public final TableField<ProductNormRecord, Integer> UPDATE_ID = createField("update_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "更新人");

    /**
     * The column <code>ejavashop.product_norm.update_time</code>. 更新时间
     */
    public final TableField<ProductNormRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "更新时间");

    /**
     * The column <code>ejavashop.product_norm.state</code>. 状态 0：删除 1:正常
     */
    public final TableField<ProductNormRecord, Byte> STATE = createField("state", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "状态 0：删除 1:正常");

    /**
     * Create a <code>ejavashop.product_norm</code> table reference
     */
    public ProductNorm() {
        this("product_norm", null);
    }

    /**
     * Create an aliased <code>ejavashop.product_norm</code> table reference
     */
    public ProductNorm(String alias) {
        this(alias, PRODUCT_NORM);
    }

    private ProductNorm(String alias, Table<ProductNormRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductNorm(String alias, Table<ProductNormRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "商品规格表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ejavashop.EJAVASHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductNormRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCT_NORM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductNormRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_NORM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductNormRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductNormRecord>>asList(Keys.KEY_PRODUCT_NORM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductNorm as(String alias) {
        return new ProductNorm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductNorm rename(String name) {
        return new ProductNorm(name, null);
    }
}
