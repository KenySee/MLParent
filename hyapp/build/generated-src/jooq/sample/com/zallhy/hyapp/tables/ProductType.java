/*
 * This file is generated by jOOQ.
*/
package com.zallhy.hyapp.tables;


import com.zallhy.hyapp.Ejavashop;
import com.zallhy.hyapp.Keys;
import com.zallhy.hyapp.tables.records.ProductTypeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 商品类型表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductType extends TableImpl<ProductTypeRecord> {

    private static final long serialVersionUID = 968573447;

    /**
     * The reference instance of <code>ejavashop.product_type</code>
     */
    public static final ProductType PRODUCT_TYPE = new ProductType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductTypeRecord> getRecordType() {
        return ProductTypeRecord.class;
    }

    /**
     * The column <code>ejavashop.product_type.id</code>.
     */
    public final TableField<ProductTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ejavashop.product_type.name</code>. 名称
     */
    public final TableField<ProductTypeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "名称");

    /**
     * The column <code>ejavashop.product_type.sort</code>. 排序
     */
    public final TableField<ProductTypeRecord, Integer> SORT = createField("sort", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "排序");

    /**
     * The column <code>ejavashop.product_type.product_norm_ids</code>. 关联规格ID集合
     */
    public final TableField<ProductTypeRecord, String> PRODUCT_NORM_IDS = createField("product_norm_ids", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "关联规格ID集合");

    /**
     * The column <code>ejavashop.product_type.product_brand_ids</code>. 关联品牌ID集合
     */
    public final TableField<ProductTypeRecord, String> PRODUCT_BRAND_IDS = createField("product_brand_ids", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "关联品牌ID集合");

    /**
     * The column <code>ejavashop.product_type.create_id</code>. 创建人
     */
    public final TableField<ProductTypeRecord, Integer> CREATE_ID = createField("create_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "创建人");

    /**
     * The column <code>ejavashop.product_type.create_time</code>. 创建时间
     */
    public final TableField<ProductTypeRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * Create a <code>ejavashop.product_type</code> table reference
     */
    public ProductType() {
        this("product_type", null);
    }

    /**
     * Create an aliased <code>ejavashop.product_type</code> table reference
     */
    public ProductType(String alias) {
        this(alias, PRODUCT_TYPE);
    }

    private ProductType(String alias, Table<ProductTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductType(String alias, Table<ProductTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "商品类型表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ejavashop.EJAVASHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductTypeRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductTypeRecord>>asList(Keys.KEY_PRODUCT_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductType as(String alias) {
        return new ProductType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductType rename(String name) {
        return new ProductType(name, null);
    }
}
