/*
 * This file is generated by jOOQ.
*/
package com.zallhy.hyapp.tables;


import com.zallhy.hyapp.Ejavashop;
import com.zallhy.hyapp.Keys;
import com.zallhy.hyapp.tables.records.CodeMasterRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 字典表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeMaster extends TableImpl<CodeMasterRecord> {

    private static final long serialVersionUID = -556815589;

    /**
     * The reference instance of <code>ejavashop.code_master</code>
     */
    public static final CodeMaster CODE_MASTER = new CodeMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeMasterRecord> getRecordType() {
        return CodeMasterRecord.class;
    }

    /**
     * The column <code>ejavashop.code_master.code_div</code>. code组id
     */
    public final TableField<CodeMasterRecord, String> CODE_DIV = createField("code_div", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "code组id");

    /**
     * The column <code>ejavashop.code_master.code_cd</code>. codeId
     */
    public final TableField<CodeMasterRecord, String> CODE_CD = createField("code_cd", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "codeId");

    /**
     * The column <code>ejavashop.code_master.code_text</code>. code中文名称
     */
    public final TableField<CodeMasterRecord, String> CODE_TEXT = createField("code_text", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "code中文名称");

    /**
     * The column <code>ejavashop.code_master.sort_order</code>. 组内顺序为
     */
    public final TableField<CodeMasterRecord, Integer> SORT_ORDER = createField("sort_order", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "组内顺序为");

    /**
     * The column <code>ejavashop.code_master.use_yn</code>. 是否使用
     */
    public final TableField<CodeMasterRecord, Integer> USE_YN = createField("use_yn", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "是否使用");

    /**
     * The column <code>ejavashop.code_master.create_user_id</code>. 创建人Id
     */
    public final TableField<CodeMasterRecord, Integer> CREATE_USER_ID = createField("create_user_id", org.jooq.impl.SQLDataType.INTEGER, this, "创建人Id");

    /**
     * The column <code>ejavashop.code_master.create_user</code>. 创建人
     */
    public final TableField<CodeMasterRecord, String> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "创建人");

    /**
     * The column <code>ejavashop.code_master.create_time</code>. 创建时间
     */
    public final TableField<CodeMasterRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>ejavashop.code_master.update_user_id</code>. 修改人Id
     */
    public final TableField<CodeMasterRecord, Integer> UPDATE_USER_ID = createField("update_user_id", org.jooq.impl.SQLDataType.INTEGER, this, "修改人Id");

    /**
     * The column <code>ejavashop.code_master.update_user</code>. 修改人
     */
    public final TableField<CodeMasterRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "修改人");

    /**
     * The column <code>ejavashop.code_master.update_time</code>. 修改时间
     */
    public final TableField<CodeMasterRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * Create a <code>ejavashop.code_master</code> table reference
     */
    public CodeMaster() {
        this("code_master", null);
    }

    /**
     * Create an aliased <code>ejavashop.code_master</code> table reference
     */
    public CodeMaster(String alias) {
        this(alias, CODE_MASTER);
    }

    private CodeMaster(String alias, Table<CodeMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeMaster(String alias, Table<CodeMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "字典表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ejavashop.EJAVASHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CodeMasterRecord> getPrimaryKey() {
        return Keys.KEY_CODE_MASTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeMasterRecord>>asList(Keys.KEY_CODE_MASTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeMaster as(String alias) {
        return new CodeMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeMaster rename(String name) {
        return new CodeMaster(name, null);
    }
}
